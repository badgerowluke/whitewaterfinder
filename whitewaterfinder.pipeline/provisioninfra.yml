parameters:
- name: principal
  type: string
  default: ''
- name: providerstorage
  type: string
  default: 'tfstatewaterfinder'
- name: resourceGroup
  type: string
  default: ''
- name: region
  type: string
  default: ''
- name: tenant
  type: string
  default: ''
- name: 'adminEmail'
  type: string
  default: ''
  
- name: 'adminId'
  type: string
  default: ''  

- name: 'storageAccountName'
  type: string
  default: ''
- name: 'storageAccountType'
  type: string
  default: 'Standard_LRS'

- name: 'appName'
  type: string
  default: ''  
- name: 'botName'
  type: string
  default: ''

- name: 'luisAuthoring'
  type: string
  default: ''

- name: 'luisEndpointName'
  type: string
  default: ''

stages:
- stage: provision
  jobs:
    - job: provision_infra
      
      pool:
        vmImage: 'ubuntu-latest'
      continueOnError: true

      steps:
        - task: AzureResourceGroupDeployment@2
          displayName: 'provision AKV'
          inputs:
            azureSubscription: '${{ parameters.principal }}'
            resourceGroupName: '${{ parameters.resourceGroup }}'
            location: '${{ parameters.region }}'
            csmFile: 'whitewaterfinder.infrastructure/keyvault/kvtemplate.json'
            csmParametersFile: 'whitewaterfinder.infrastructure/keyvault/kvparameters.json'
            overrideParameters: '-tenantId "${{ parameters.tenant }}" -adminId "${{ parameters.adminId }}" -kvName "${{ parameters.resourceGroup }}"'     

              
        - task: AzureResourceGroupDeployment@2
          displayName: 'provision storage'
          inputs:
            azureSubscription: '${{ parameters.principal }}'
            resourceGroupName: '${{ parameters.resourceGroup }}'
            location: '${{parameters.region}}'
            csmFile: 'whitewaterfinder.infrastructure/storage/storage.json'
            csmParametersFile: 'whitewaterfinder.infrastructure/storage/storageparams.json'
            overrideParameters: '-storageAccountType "${{ parameters.storageAccountType }}" -appName "${{ parameters.appName }}" -preferencesApp "${{ parameters.appName }}-preferences" -storageAccountName "${{ parameters.storageAccountName }}"'           
            deploymentOutputs: 'sharedValues'        

        - task: AzureResourceGroupDeployment@2
          displayName: 'provision (Search) Resources'
          inputs:
            azureSubscription: '${{ parameters.principal }}'
            resourceGroupName: '${{ parameters.resourceGroup }}'
            location: '${{ parameters.region }}'
            csmFile: 'whitewaterfinder.infrastructure/search/search.json'
            csmParameetersFile: 'whitewaterfinder.infrastructure/search/searchparams.json'        
            deploymentOutputs: 'searchOutput'
          
        - pwsh: |
              $stuff = ConvertFrom-Json -InputObject $env:searchOutput
              $key = $stuff.searchKey.Value
              Write-Host "##vso[task.setvariable variable=searchKey]$key"
          displayName: 'parse ARM output'
          env: 
            searchOutput: $(searchOutput)

        - task: AzureResourceGroupDeployment@2
          displayName: provision apis
          name: provisioning
          inputs:
            azureSubscription: '${{ parameters.principal }}'
            resourceGroupName: '${{ parameters.resourceGroup }}'
            location: '${{ parameters.region }}'
            csmFile: 'whitewaterfinder.infrastructure/api/api.json'
            csmParametersFile: 'whitewaterfinder.infrastructure/api/apiparams.json'
            overrideParameters: '-storageAccountName ${{ parameters.storageAccountName }} -appName "${{ parameters.appName }}" -appPlanName "WaterFinderPlan" -preferencesApp "${{ parameters.appName }}-preferences"  -azureSearchKey $(searchKey)'          
            deploymentOutputs: 'functionKeys'

        - pwsh: |
            $allKeys = ConvertFrom-Json -InputObject $env:functionKeys
            $riverKey = $allKeys.riversKey.Value
            $userKey = $allKeys.usersKey.Value
            $botKey = $allKeys.botKey.Value
            Write-Host $allKeys
            New-Item -Path $(Pipeline.Workspace) -Name 'variables' -ItemType 'directory'
            New-Item -Path $(Pipeline.Workspace)/variables -Name 'functionkeys.log' -ItemType 'file'
            Set-Content -Path '$(Pipeline.Workspace)/variables/functionkeys.log' -Value riverkey:$riverKey
            Add-Content -Path '$(Pipeline.Workspace)/variables/functionkeys.log' -Value userKey:$userKey
            Add-Content -Path '$(Pipeline.Workspace)/variables/functionkeys.log' -Value botKey:$botKey

          condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues')
          displayName: 'parse API output'
          env:
            functionKeys: $(functionKeys)
        
        
        - pwsh: |
            Write-Host "API did not deploy again"
          condition: eq(variables['Agent.JobStatus'], 'Failed')

        - publish: $(Pipeline.Workspace)/variables
          condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues')
          artifact: variables





        - task: AzureCli@2
          condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues')
          displayName: 'create or pull MSFT App ID'
          inputs:
            azureSubscription: '${{ parameters.principal }}'
            scriptType: pscore
            scriptLocation: 'scriptPath'
            ScriptPath: 'whitewaterfinder.infrastructure/app-registration-create.ps1'
            ScriptArguments: '"${{ parameters.botName }}-ar"'



        - task: AzureResourceGroupDeployment@2
          displayName: 'Provision APIM'
          inputs:
              azureSubscription: '${{ parameters.principal }}'
              resourceGroupName: '${{ parameters.resourceGroup }}'
              location: '${{parameters.region}}'
              csmFile: 'whitewaterfinder.infrastructure/apim/apimdeploy.json'  
              csmParametersFile: 'whitewaterfinder.infrastructure/apim/apimparameters.json'   
              overrideParameters: '-adminEmail "${{ parameters.adminEmail }}" -appName "${{ parameters.appName }}" -preferencesApp "${{ parameters.appName }}-preferences"'   

        - task: AzureResourceGroupDeployment@2
          displayName: 'provision cognititve services'
          inputs: 
              azureSubscription: '${{ parameters.principal }}'
              resourceGroupName: '${{ parameters.resourceGroup }}'
              location: '${{parameters.region}}'
              csmFile: 'whitewaterfinder.infrastructure/cognitiveservices/cognitiveservices.json'
              csmParametersFile: 'whitewaterfinder.infrastructure/cognitiveservices/cogservicesparams.json'      
              overrideParameters: '-luisName "${{ parameters.luisEndpointName }}" -authoringName "${{ parameters.luisAuthoring }}" -botAppName "${{ parameters.botName }}" -botInsightsName "${{ parameters.appName }}"'  

        - task: AzureResourceGroupDeployment@2
          displayName: 'provision Sendgrid'
          inputs:
            azureSubscription: '${{ parameters.principal }}'
            resourceGroupName: '${{ parameters.resourceGroup }}'
            location: '${{ parameters.region }}'
            csmFile: 'whitewaterfinder.infrastructure/communications/communicationdeploy.json'
            csmParametersFile: 'whitewaterfinder.infrastructure/communications/communicationdeployparams.json'
            overrideParameters: '-password "$(sendgridpassword)" -email "${{ parameters.adminEmail }}" -website "$(adminwebsite)"'

        - task: AzureResourceGroupDeployment@2
          displayName: 'provision static web app'
          inputs:
            azureSubscription: '${{ parameters.principal }}'
            resourceGroupName: '${{ parameters.resourceGroup }}'
            location: '${{ parameters.region }}'      
            csmFile: 'whitewaterfinder.infrastructure/site/staticsite.json'
            csmParametersFile: 'whitewaterfinder.infrastructure/site/staticsiteparams.json'
            overrideParameters: '-repositoryToken $(repositoryToken)'

        - task: PublishBuildArtifacts@1
          displayName: 'Push infra scripts'
          condition: always()
          inputs:
            PathtoPublish: 'whitewaterfinder.infrastructure/'
            ArtifactName: infra            

    
        