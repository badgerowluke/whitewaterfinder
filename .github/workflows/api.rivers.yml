on:
  push:
    branches:
      - trunk
    paths:
      - 'whitewaterfinder.api.rivers/**'
      - 'whitewaterfinder.Core.Rivers/**'
      - 'whitewaterfinder.Repo.Rivers/**'
      - 'whitewaterfinder.BusinessObjects/**'
      - '.github/workflows/api.rivers.yml'
env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'whitewaterfinder.api.rivers'
jobs:
  build-and-test-rivers-api:
  #needs a check to verify if the infrastructure already exists or not.
    name: "build and test rivers api"
    runs-on: ubuntu-latest


    defaults:
      run:
        shell: bash

    steps:
      - name: "checkout"
        uses: actions/checkout@v2.1.0

      - name: setup dotnet 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: setup dotnet
        uses: actions/setup-dotnet@v1
        with:
         dotnet-version: '5.0.x'



      # - name: az login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZCLI_CREDS }}         

      - name: build test and release
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        run: |

          dotnet nuget add source --username ${{ secrets.GH_USER }} \
                                  --password ${{ secrets.GH_TOKEN }} \
                                  --store-password-in-clear-text \
                                  --name github "${{ secrets.GH_PACKAGES }}"
          dotnet restore 
          dotnet build --no-restore --configuration Release
          dotnet test --no-build --verbosity normal
          dotnet publish --no-restore -c Release -o './publish/rivers'
          pwd
          ls publish
          docker build . --file ./Dockerfile --label "runnumber-${GITHUB_RUN_ID}"
      
      # - name: deploy to funtionapp
      #   uses: azure/webapps-deploy@v2
      #   with: 
      #     app-name: 'paddle-finder'
      #     package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/publish/rivers'

 

      # - name: logout
      #   run: az logout

        
      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin


      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/rivers.api

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo NAME=$IMAGE_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION


