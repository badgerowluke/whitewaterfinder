on:
  push:
    branches:
      - trunk
    paths:
      - 'whitewaterfinder.api.rivers/**'

jobs:
  build-and-test:
  #needs a check to verify if the infrastructure already exists or not.
    name: "build and test"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: "checkout"
        uses: actions/checkout@v2.1.0
      - name: setup dotnet
        uses: actions/setup-dotnet@v1
        with:
         dotnet-version: '3.1.x'



      - name: az login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZCLI_CREDS }}         

      # - name: build test and release
      #   working-directory: whitewaterfinder.api.rivers
      #   env:
      #     NUGET_CREDENTIALPROVIDER_SESSIONTOKENCACHE_ENABLED: true
      #     VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"${{ secrets.AZ_ARTIFACTS }}", "password": "${{ secrets.AZ_ARTIFACT_TOKEN }}"}]}'

      #   run: |
      #     dotnet restore -s ${{ secrets.AZ_ARTIFACTS }}
      #     dotnet build --no-restore --configuration Release
      #     dotnet test --no-build --verbosity normal
      #     dotnet publish --no-restore -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/rivers'
      
      # - name: deploy to funtionapp
      #   uses: azure/webapps-deploy@v2
      #   with: 
      #     app-name: 'paddle-finder'
      #     package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/rivers'


      #DOING THIS FOR AN INTERNAL TEST OF K8S ENVIRONMENTS
      - name: build container
        run: |

          az acr login --name paddlefinderregistry 
          docker build . --file ./whitewaterfinder.api.rivers/Dockerfile \
          --tag paddlefinderregistry.azurecr.io/whitewaterfinder.api.rivers:$GITHUB_RUN_ID \
          --build-arg TOKEN=${{ secrets.AZ_ARTIFACT_TOKEN }} \
          --build-arg ENDPOINT=${{ secrets.AZ_ARTIFACTS }}
          docker push paddlefinderregistry.azurecr.io/whitewaterfinder.api.rivers:$GITHUB_RUN_ID  


      - name: logout
        run: az logout